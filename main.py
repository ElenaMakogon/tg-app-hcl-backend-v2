import asyncio
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from pydantic import BaseModel
from typing import Dict, List, Any


from models.models import init_db
from handlers import requests as rq
from handlers.work_with_GoogleTable import GoogleSheetsService
from handlers.balance_formation import GoogleSheetsBalanceUpdater

######### –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è


@asynccontextmanager
async def lifespan(app_: FastAPI):
    await init_db()
    yield


#app = FastAPI(title="web_app_tg", lifespan=lifespan)
app = FastAPI(title="web_app_tg", lifespan=lifespan) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ add.py, lifespan –Ω–µ –≤—ã–∑—ã–≤–∞—é
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://tg-app-hcl.web.app",  # –í–∞—à Firebase Hosting URL
        "http://www.cbr.ru",
        "http://127.0.0.1:8000"
    ],
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_credentials=True,
    allow_headers=["*"],
)

service_GoogleSheet_Ledger = GoogleSheetsService()
service_GoogleSheet_Balances = GoogleSheetsBalanceUpdater()


import os

from dotenv import find_dotenv, load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage


load_dotenv(find_dotenv())

bot = Bot(token=os.getenv('TOKEN_Lora'))

TELEGRAM_CHAT_ID = os.getenv('telegram_chat_id')

from aiogram import Router

router = Router()
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Lora, —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(dp.start_polling())


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
table_structure = {}

@app.get("/")
async def root():
    return {"message": "–ü—Ä–∏–≤–µ—Ç"}

from fastapi import Query

@app.get("/api/read_column_GoogleTable/")
async def read_columns(columns: list[str] = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")):
    """
    –ß—Ç–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

    GET /api/read_column_GoogleTable/?columns=Date&columns=Amount&columns=Description
    """
    specific_columns = await service_GoogleSheet_Ledger.read_specific_columns(columns)
    print(specific_columns)
    return specific_columns


@app.get("/api/read_GoogleTable/")
async def read_all_columns_to_dict():
    """
    –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
    """
    all_data = await service_GoogleSheet_Ledger.read_all_columns_to_dict()

    return JSONResponse(
        content=all_data,
        media_type="application/json; charset=utf-8"
    )


@app.get("/api/table-structure")
async def get_table_structure():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã (–∫–æ–ª–æ–Ω–æ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)"""
    try:
        global table_structure
        table_structure = await service_GoogleSheet_Ledger.read_all_columns_to_dict()
        return table_structure
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/add-to-sheet")
async def add_to_sheet(row_data: Dict):
    print("/api/add-to-sheet, row_data", row_data)
    try:
        # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Ledger
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
            sheet_data = {}
            for key, value in row_data.items():

                if isinstance(value, (int, float)):
                    # –ß–∏—Å–ª–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å - Google Sheets –ø–æ–π–º–µ—Ç
                    sheet_data[key] = value
                else:
                    # –°—Ç—Ä–æ–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
                    sheet_data[key] = str(value) if value is not None else ""

            result = await service_GoogleSheet_Ledger.add_data(sheet_data)
            print("main, /api/add-to-sheet, sheet_data ", sheet_data)
            print(f"‚úÖ Ledger: {result}")

            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            try:
                if row_data['–ö—É–¥–∞'] != '':
                    transaction = {}
                    transaction.setdefault('–í–∞–ª—é—Ç–∞', sheet_data['–í–∞–ª—é—Ç–∞'])
                    transaction.setdefault('–ò–Ω—Å—Ç–∞–Ω—Å', (sheet_data['–ö—É–¥–∞']))
                    transaction.setdefault('–°—É–º–º–∞', sheet_data['–°—É–º–º–∞'])
                    balance_updater = await service_GoogleSheet_Balances.update_balance(transaction)
                    print(f"‚úÖ Balance: {balance_updater}")

                if row_data['–û—Ç–∫—É–¥–∞'] != '':
                    transaction = {}
                    transaction.setdefault('–í–∞–ª—é—Ç–∞', sheet_data['–í–∞–ª—é—Ç–∞'])
                    transaction.setdefault('–ò–Ω—Å—Ç–∞–Ω—Å', (sheet_data['–û—Ç–∫—É–¥–∞']))
                    transaction.setdefault('–°—É–º–º–∞', -sheet_data['–°—É–º–º–∞'])
                    balance_updater = await service_GoogleSheet_Balances.update_balance(transaction)
                    print(f"‚úÖ Balance: {balance_updater}")
                number_row = result.split()[-1]

                await service_GoogleSheet_Ledger.mark_balance_update(number_row)
            except Exception as e:
                print(f"üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ Balance: {e}")
                balance_updater = f"Balance update failed: {str(e)}"
            return {
                "status": "success",
                "message": result,
                "balance_update": balance_updater,
                "added_data": row_data
            }

        except Exception as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ Ledger: {e}")
            return {"status": "error", "message": f"Ledger error: {str(e)}"}


    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return {"status": "error", "message": str(e)}


@app.post("/api/update-sheet")
async def update_balance(data: Dict[str, str]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        balance_updater = service_GoogleSheet_Balances.update_balance(data)
        return {
            "status": "success",
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


from fastapi import FastAPI, HTTPException
import httpx
import xml.etree.ElementTree as ET
from datetime import datetime


@app.get("/api/exchange-rates") # –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –±–∞–Ω–∫ –†–§
async def get_exchange_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§"""
    try:
        today = datetime.now().strftime("%d/%m/%Y")
        url = f"http://www.cbr.ru/scripts/XML_daily.asp?date_req={today}"

        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=10.0)
            response.raise_for_status()

            # –ü–∞—Ä—Å–∏–º XML
            root = ET.fromstring(response.text)
            rates = {}

            for valute in root.findall('Valute'):
                char_code = valute.find('CharCode').text
                value = float(valute.find('Value').text.replace(',', '.'))
                nominal = float(valute.find('Nominal').text)
                rates[char_code] = value / nominal
                print(rates[char_code])

            return rates

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}")


@app.post("/api/send-to-chat")
async def send_to_chat(data_dict: Dict[str, Any]):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "‚úÖ üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Alex:\n\n"
        for key, value in data_dict.items():
            if type(value) == str and value != "" and "–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏" not in key.lower(): # –Ω–µ –≤—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                message_text += f"‚ÄºÔ∏èÔ∏è{value}\n" if "–∑–∞—Ä–ø–ª–∞—Ç–∞" in value.lower() else f"` {key}: {value}\n"
            elif type(value) != str and value != "":
                message_text += f"` {key}: {'{:,.2f}'.format(value)}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message_text
        )
        # –≤—Å—Ç–∞–≤–ª—è—Ç—å –≥–∞–ª–æ—á–∫—É "‚úì —á–∞—Ç"
        number_row = int(data_dict['–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏'])
        await service_GoogleSheet_Ledger.mark_sending_to_chat(number_row)
        return {"success": True, "message": "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç"}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


